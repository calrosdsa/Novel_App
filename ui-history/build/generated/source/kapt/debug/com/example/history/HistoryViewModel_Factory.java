// Generated by Dagger (https://dagger.dev).
package com.example.history;

import com.example.data.remote.ApiService;
import com.example.domain.UserAuth;
import com.example.domain.observers.ObservableHistoryNovels;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HistoryViewModel_Factory implements Factory<HistoryViewModel> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<UserAuth> authProvider;

  private final Provider<ObservableHistoryNovels> pagingInteractorProvider;

  public HistoryViewModel_Factory(Provider<ApiService> apiServiceProvider,
      Provider<UserAuth> authProvider, Provider<ObservableHistoryNovels> pagingInteractorProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.authProvider = authProvider;
    this.pagingInteractorProvider = pagingInteractorProvider;
  }

  @Override
  public HistoryViewModel get() {
    return newInstance(apiServiceProvider.get(), authProvider.get(), pagingInteractorProvider.get());
  }

  public static HistoryViewModel_Factory create(Provider<ApiService> apiServiceProvider,
      Provider<UserAuth> authProvider, Provider<ObservableHistoryNovels> pagingInteractorProvider) {
    return new HistoryViewModel_Factory(apiServiceProvider, authProvider, pagingInteractorProvider);
  }

  public static HistoryViewModel newInstance(ApiService apiService, UserAuth auth,
      ObservableHistoryNovels pagingInteractor) {
    return new HistoryViewModel(apiService, auth, pagingInteractor);
  }
}
